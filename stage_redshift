from airflow.hooks.postgres_hook import PostgresHook
from airflow.contrib.hooks.aws_hook import AwsHook
from airflow.models import BaseOperator
from airflow.utils.decorators import apply_defaults
from airflow.secrets.metastore import MetastoreBackend

class StageToRedshiftOperator(BaseOperator):
    """A customer operator to load JSON data from AWS s3 to Redshift.

    Class variables:
    ui_color: sets a colour for the Airflow DAG task in the user interface.
    copy_sql: a template to load data from s3 to Redshift.
    It is applied when the 'execute' method is called.

    Dependencies:
    This script assumes a table has been created in Redshift.
    """

    ui_color = '#358140'
    template_fields = ("s3_key",)
    copy_sql = """
        COPY {}
        FROM '{}'
        ACCESS_KEY_ID '{}'
        SECRET_ACCESS_KEY '{}'
        JSON 'auto'
    """

    @apply_defaults
    def __init__(self,
                 redshift_conn_id="",
                 aws_credentials_id="",
                 table="",
                 s3_bucket="",
                 s3_key="",
                 *args, **kwargs):

        """Initialise an instance of the StageToRedshiftOperator class.

        redshift_conn_id: the Airflow connection ID for Redshift
        aws_credentials_id: the Airflow connection ID for AWS credentials
        table: the name of the staging table
        s3_bucket: the name of the parent s3 bucket
        s3_key: the subdirectory within the parent s3 bucket

        The parameters are passed in when an instance of the class is created.
        This would be a task in the main DAG.
        """

        super(StageToRedshiftOperator, self).__init__(*args, **kwargs)
        self.table = table
        self.redshift_conn_id = redshift_conn_id
        self.s3_bucket = s3_bucket
        self.s3_key = s3_key
        self.aws_credentials_id = aws_credentials_id

    def execute(self, context):
        """Connects to s3 and Redshift and executes the copy_sql class variable.

        When an instance of this class is created in the main DAG script,
        it connects Airflow to S3 and Redshift and performs the copy_sql operation,
        using the table, S3 source data, AWS connection login and password metadata.
        """

        self.log.info('StageToRedshiftOperator implementation')

        metastoreBackend = MetastoreBackend()
        aws_connection = metastoreBackend.get_connection(self.aws_credentials_id)
        redshift = PostgresHook(postgres_conn_id=self.redshift_conn_id)

        self.log.info(f"Clearing data from destination Redshift table {self.table}")
        redshift.run("DELETE FROM {}".format(self.table))

        self.log.info("Copying data from S3 to Redshift")
        rendered_key = self.s3_key.format(**context)
        s3_path = f"s3://{self.s3_bucket}/{rendered_key}"
        formatted_sql = StageToRedshiftOperator.copy_sql.format(
            self.table,
            s3_path,
            aws_connection.login,
            aws_connection.password
        )
        redshift.run(formatted_sql)
