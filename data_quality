from airflow.hooks.postgres_hook import PostgresHook
from airflow.models import BaseOperator
from airflow.utils.decorators import apply_defaults

class DataQualityOperator(BaseOperator):
    ui_color = '#89DA59'

    @apply_defaults
    def __init__(self,
                 redshift_conn_id="",
                 data_quality_check_list=[],
                 *args, **kwargs):

        super(DataQualityOperator, self).__init__(*args, **kwargs)
        self.redshift_conn_id = redshift_conn_id
        self.data_quality_check_list = data_quality_check_list

    def execute(self, context):
        self.log.info('DataQualityOperator implementation')
        redshift = PostgresHook(self.redshift_conn_id)

        for check in self.data_quality_check_list:
            sql_query = check.get('check_sql')
            expected_result = check.get('expected_result')

            records = redshift.get_records(sql_query)

            if not records or len(records[0]) < 1 or records[0][0] != expected_result:
                raise ValueError(f"Data quality check failed. {sql_query} returned {records[0][0]}. Expected {expected_result}")

        self.log.info(f"Data quality checks passed")
